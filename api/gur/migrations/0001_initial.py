# Generated by Django 4.0.2 on 2022-07-03 14:29

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'blank': 'Необхідно вказати емейл.', 'invalid': 'Будь ласка, вкажіть валідний емейл.', 'unique': 'Користувач з таким емейлом уже існує.'}, max_length=254, unique=True, verbose_name='Email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourierAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=70, null=True, verbose_name='First name')),
                ('tel_num', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator(message='Будь ласка, вкажіть правильний номер телефону.', regex='^[0-9]*$')], verbose_name='Telephone number')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courier', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Courier account',
                'verbose_name_plural': 'Courier accounts',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rest_photo', models.TextField(blank=True, max_length=16383, null=True, verbose_name='Restaurant photo')),
                ('rest_address', models.CharField(max_length=250, verbose_name='Restaurant address')),
                ('name', models.CharField(max_length=150, verbose_name='Restaurant name')),
                ('open_from', models.TimeField(blank=True, null=True, verbose_name='Restaurant opening time')),
                ('open_to', models.TimeField(blank=True, null=True, verbose_name='Restaurant closing time')),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326, verbose_name='Restaurant location')),
            ],
            options={
                'verbose_name': 'Restaurant',
                'verbose_name_plural': 'Restaurants',
            },
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=70, null=True, verbose_name='First name')),
                ('tel_num', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator(message='Будь ласка, вкажіть правильний номер телефону.', regex='^[0-9]*$')], verbose_name='Telephone number')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User account',
                'verbose_name_plural': 'User accounts',
            },
        ),
        migrations.CreateModel(
            name='RestaurantAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_admins', to='gur.restaurant', verbose_name='Restaurant')),
                ('user_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_admins', to='gur.useraccount', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Restaurant admin',
                'verbose_name_plural': 'Restaurant admins',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Summary')),
                ('delivery_address', models.CharField(blank=True, max_length=250, null=True, verbose_name='Delivery address')),
                ('delivery_location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='Delivery location')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('order_details', models.CharField(blank=True, max_length=250, null=True, verbose_name='Order details')),
                ('courier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='gur.courieraccount', verbose_name='Courier')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='gur.useraccount', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dish_photo', models.TextField(blank=True, max_length=16383, null=True, verbose_name='Dish photo')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Price')),
                ('gramme', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Grammes')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dishes', to='gur.restaurant', verbose_name='Restaurant')),
            ],
            options={
                'verbose_name': 'Dish',
                'verbose_name_plural': 'Dishes',
            },
        ),
        migrations.CreateModel(
            name='CourierLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created_at')),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326, verbose_name='Location')),
                ('courier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='gur.courieraccount', verbose_name='Courier')),
            ],
            options={
                'verbose_name': 'Courier location',
                'verbose_name_plural': 'Courier locations',
            },
        ),
        migrations.CreateModel(
            name='OrderStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('O', 'Opened order'), ('P', 'Preparing order'), ('D', 'Delivering order'), ('C', 'Canceled order'), ('F', 'Delivered order')], max_length=1, verbose_name='Status')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='gur.order', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Order status',
                'verbose_name_plural': 'Order statuses',
                'ordering': ('created_at', 'order'),
                'unique_together': {('order', 'status')},
            },
        ),
        migrations.CreateModel(
            name='OrderDish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_dishes', to='gur.dish', verbose_name='Dish')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_dishes', to='gur.order', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Ordered dish',
                'verbose_name_plural': 'Ordered dishes',
                'unique_together': {('order', 'dish')},
            },
        ),
    ]
