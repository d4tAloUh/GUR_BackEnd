# Generated by Django 3.1.13 on 2022-02-03 16:27

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'blank': 'Необхідно вказати емейл.', 'invalid': 'Будь ласка, вкажіть валідний емейл.', 'unique': 'Користувач з таким емейлом уже існує.'}, max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourierAccount',
            fields=[
                ('first_name', models.CharField(blank=True, max_length=70)),
                ('tel_num', models.CharField(blank=True, max_length=12, validators=[django.core.validators.RegexValidator(message='Будь ласка, вкажіть валідний номер телефону.', regex='^[0-9]*$')])),
                ('courier_id', models.AutoField(primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('rest_id', models.AutoField(primary_key=True, serialize=False)),
                ('rest_photo', models.TextField(blank=True, max_length=16383, null=True)),
                ('rest_address', models.CharField(max_length=250)),
                ('name', models.CharField(max_length=150)),
                ('open_from', models.TimeField(blank=True, null=True)),
                ('open_to', models.TimeField(blank=True, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('first_name', models.CharField(blank=True, max_length=70)),
                ('tel_num', models.CharField(blank=True, max_length=12, validators=[django.core.validators.RegexValidator(message='Будь ласка, вкажіть валідний номер телефону.', regex='^[0-9]*$')])),
                ('account_id', models.AutoField(primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RestaurantAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rest_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gur.restaurant')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gur.useraccount')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('summary', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('delivery_address', models.CharField(max_length=250, null=True)),
                ('delivery_location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('created_tm', models.DateTimeField(default=django.utils.timezone.now)),
                ('order_details', models.CharField(blank=True, max_length=250, null=True)),
                ('courier_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='gur.courieraccount')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='gur.useraccount')),
            ],
        ),
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('dish_id', models.AutoField(primary_key=True, serialize=False)),
                ('dish_photo', models.TextField(blank=True, max_length=16383, null=True)),
                ('name', models.CharField(max_length=150)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('gramme', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('restaurant_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gur.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='CourierLocation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('courier', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='gur.courieraccount')),
            ],
        ),
        migrations.CreateModel(
            name='OrderStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('O', 'Opened order'), ('P', 'Preparing order'), ('D', 'Delivering order'), ('C', 'Canceled order'), ('F', 'Delivered order')], max_length=1)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gur.order')),
            ],
            options={
                'verbose_name': 'Order Status',
                'verbose_name_plural': 'Order status',
                'ordering': ('timestamp', 'order_id'),
                'unique_together': {('order_id', 'status')},
            },
        ),
        migrations.CreateModel(
            name='OrderDish',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('dish_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gur.dish')),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gur.order')),
            ],
            options={
                'unique_together': {('order_id', 'dish_id')},
            },
        ),
    ]
